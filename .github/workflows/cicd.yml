name: CI/CD

on:
  push:
    branches: ["main", "develop"]
  pull_request:

jobs:
  # 1. Lint & Test
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Flake8 (Python Lint)
        run: |
          pip install --no-cache-dir flake8
          # flake8 api/ create_tiny_model.py

      - name: Basic tests (Optional)
        run: |
          echo "Run any basic Python unit tests here..."
          # e.g., python -m unittest discover tests

  # 2. Train Model (or skip if found) & Upload Artifact
  train-model:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          cd api
          pip install --no-cache-dir -r requirements.txt
          cd ..

      - name: Authenticate to Google Cloud (Optional)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud (Optional if using GCS)
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Train Model (or Skip if found in GCS)
        run: |
          python create_tiny_model.py \
            --train \
            --force-train \
            --model-dir ./model \
            --data-file data/training_data.txt \
            --gcs-path "gs://tiny-llm-model/tiny-llm-model"

      - name: Archive Model Folder
        run: |
          tar -czf model.tar.gz ./model

      - name: Upload Model Artifact
        uses: actions/upload-artifact@v3
        with:
          name: model-artifact
          path: model.tar.gz

  # 3. Build Docker
  build-docker:
    runs-on: ubuntu-latest
    needs: [train-model]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Download Model Artifact
        uses: actions/download-artifact@v3
        with:
          name: model-artifact

      - name: Extract Model
        run: |
          tar -xzf model.tar.gz -C .
          ls -l ./model

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'
      
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker europe-west2-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build \
            -t europe-west2-docker.pkg.dev/aiops-bone-zone/tiny-llm-app/tiny-llm-app:latest \
            -f docker/Dockerfile .

  # 4. Security Scan (Docker Image Vulnerability Check)
  security-scan:
    runs-on: ubuntu-latest
    needs: [build-docker]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # 1) Auth to GCP again so docker pulls work 
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker europe-west2-docker.pkg.dev

      # 2) Pull the existing image to local Docker, so Trivy can see it
      - name: Pull Docker Image
        run: |
          docker pull europe-west2-docker.pkg.dev/aiops-bone-zone/tiny-llm-app/tiny-llm-app:latest

      # 3) Install Trivy
      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.44.1/trivy_0.44.1_Linux-64bit.deb
          sudo dpkg -i trivy_0.44.1_Linux-64bit.deb

      # 4) Run Trivy on the local, pulled image
      - name: Docker Image Scan
        run: |
          trivy image \
            --scanners vuln \
            --exit-code 1 \
            --severity HIGH,CRITICAL \
            europe-west2-docker.pkg.dev/aiops-bone-zone/tiny-llm-app/tiny-llm-app:latest



  # 5. Push Docker image (only if scan passes)
  push-docker:
    runs-on: ubuntu-latest
    needs: [security-scan]
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'
      
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker europe-west2-docker.pkg.dev

      - name: Push Docker image
        run: |
          docker push \
            europe-west2-docker.pkg.dev/aiops-bone-zone/tiny-llm-app/tiny-llm-app:latest

  # 6. Terraform Apply -> Ephemeral Environment
  ephemeral-environment:
    runs-on: ubuntu-latest
    needs: [push-docker]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      # We'll pass a unique suffix from the GitHub run_id (or PR number) to Terraform
      - name: Terraform Init & Apply
        working-directory: ./terraform
        env:
          ENV_SUFFIX: ${{ github.run_id }}
        run: |
          terraform init -upgrade
          terraform apply -auto-approve -var="env_suffix=${ENV_SUFFIX}"

      - name: Fetch Cloud Run URL
        id: get_url
        working-directory: ./terraform
        run: |
          # Save the output to GitHub Actions outputs
          terraform output -raw cloud_run_url > url.txt
        shell: bash

      - name: Print Cloud Run URL
        run: |
          echo "Cloud Run URL is: $(cat terraform/url.txt)"

      - name: Ephemeral Wait
        run: sleep 150  # e.g. 2.5 minutes to test manually

  # 7. Integration Tests (once environment is up)
  integration-tests:
    runs-on: ubuntu-latest
    needs: [ephemeral-environment]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Retrieve Cloud Run URL
        id: get_url
        working-directory: ./terraform
        run: |
          terraform output -raw cloud_run_url > url.txt
        shell: bash

      - name: Install HTTPie
        run: |
          sudo apt-get update
          sudo apt-get install -y httpie

      - name: Basic integration test
        run: |
          export URL=$(cat terraform/url.txt)
          echo "Pinging $URL"
          http --check-status --ignore-stdin GET "$URL" \
            || (echo "FAIL: Can't access ephemeral environment" && exit 1)

          # Optionally test /generate endpoint:
          http --check-status --ignore-stdin POST "$URL/generate" prompt='Hello test' \
            || (echo "FAIL: /generate endpoint error" && exit 1)

  # 8. Terraform Destroy
  destroy-environment:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Terraform Destroy
        working-directory: ./terraform
        env:
          ENV_SUFFIX: ${{ github.run_id }}
        run: |
          terraform destroy -auto-approve -var="env_suffix=${ENV_SUFFIX}"
