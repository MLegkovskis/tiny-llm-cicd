name: CI/CD

on:
  push:
    branches: ["main", "develop"]
  pull_request:

jobs:
  # 1. Lint & Test
  lint-and-test:
    runs-on: ubuntu-latest
    env:
      REGION: europe-west2
      PROJECT_ID: tiny-llm-cicd
      REPOSITORY: tiny-llm-app
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Flake8 (Python Lint)
        run: |
          pip install --no-cache-dir flake8
          # flake8 api/ create_tiny_model.py

      - name: Basic tests (Optional)
        run: |
          echo "Run any tests here..."
          # e.g., python -m unittest discover tests

  # 2. Train Model (or skip if GCS model is found) & Upload Artifact
  train-model:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    env:
      REGION: europe-west2
      PROJECT_ID: tiny-llm-cicd
      REPOSITORY: tiny-llm-app
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          cd api
          pip install --no-cache-dir -r requirements.txt
          cd ..

      - name: Authenticate to Google Cloud (Optional)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          # Explicitly request storage.admin scope for bucket creation
          scopes: 'https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/devstorage.full_control'

      - name: Set up gcloud (Optional if using GCS)
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Create GCS bucket if it doesn't exist
        run: |
          # Extract bucket name from the GCS path
          BUCKET_NAME="tiny-llm-model"
          
          # Check if bucket exists
          if ! gsutil ls -b gs://$BUCKET_NAME &>/dev/null; then
            echo "Creating bucket gs://$BUCKET_NAME..."
            gsutil mb gs://$BUCKET_NAME
            echo "Bucket created successfully."
          else
            echo "Bucket gs://$BUCKET_NAME already exists."
          fi

      - name: Set environment variables
        run: |
          echo "REGION=$REGION" >> $GITHUB_ENV
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          echo "REPOSITORY=$REPOSITORY" >> $GITHUB_ENV

      - name: Enable required Google Cloud APIs
        run: |
          echo "Enabling required Google Cloud APIs..."
          
          # Enable Artifact Registry API
          gcloud services enable artifactregistry.googleapis.com --project=${{ env.PROJECT_ID }}
          
          # Enable Cloud Run API
          gcloud services enable run.googleapis.com --project=${{ env.PROJECT_ID }}
          
          # Enable Cloud Build API
          gcloud services enable cloudbuild.googleapis.com --project=${{ env.PROJECT_ID }}
          
          # Enable Container Registry API
          gcloud services enable containerregistry.googleapis.com --project=${{ env.PROJECT_ID }}
          
          # Enable Cloud Storage API
          gcloud services enable storage.googleapis.com --project=${{ env.PROJECT_ID }}
          
          # Enable Cloud Resource Manager API (needed for IAM operations)
          gcloud services enable cloudresourcemanager.googleapis.com --project=${{ env.PROJECT_ID }}
          
          # Wait a moment for APIs to be fully enabled
          echo "Waiting for APIs to be fully enabled..."
          sleep 20
          
          echo "APIs enabled successfully."

      - name: Create Artifact Registry repository
        run: |
          # Check if repository exists
          if ! gcloud artifacts repositories describe ${{ env.REPOSITORY }} \
            --location=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }} &>/dev/null; then
            
            echo "Creating Artifact Registry repository ${{ env.REPOSITORY }}..."
            gcloud artifacts repositories create ${{ env.REPOSITORY }} \
              --repository-format=docker \
              --location=${{ env.REGION }} \
              --project=${{ env.PROJECT_ID }} \
              --description="Repository for tiny-llm-app Docker images"
            
            echo "Repository created successfully."
          else
            echo "Repository ${{ env.REPOSITORY }} already exists."
          fi
          
          # Skip IAM binding operations as they require additional permissions
          # Instead, ensure the service account has the right roles in the Google Cloud Console
          echo "Note: Make sure your service account has the following roles in GCP Console:"
          echo "- roles/artifactregistry.admin"
          echo "- roles/storage.admin"

      - name: Train Model (or Skip if found in GCS)
        run: |
          python create_tiny_model.py \
            --train \
            --force-train \
            --model-dir ./model \
            --data-file data/training_data.txt \
            --gcs-path "gs://tiny-llm-model/tiny-llm-model"

      - name: Archive Model Folder
        run: |
          tar -czf model.tar.gz ./model

      - name: Upload Model Artifact
        uses: actions/upload-artifact@v4
        with:
          name: model-artifact
          path: model.tar.gz

  # 3. Build & Scan Docker
  build-docker:
    runs-on: ubuntu-latest
    needs: [train-model]
    env:
      REGION: europe-west2
      PROJECT_ID: tiny-llm-cicd
      REPOSITORY: tiny-llm-app
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Download Model Artifact
        uses: actions/download-artifact@v4
        with:
          name: model-artifact

      - name: Extract Model
        run: |
          tar -xzf model.tar.gz -C .
          ls -l ./model

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'
      
      - name: Configure Docker for Artifact Registry
        run: |
          # Use environment variables from the previous job
          echo "Using repository: ${{ env.REPOSITORY }} in region: ${{ env.REGION }} and project: ${{ env.PROJECT_ID }}"
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build Docker image
        run: |
          docker build \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.REPOSITORY }}:latest \
            -f docker/Dockerfile .

      # Prune any unused docker resources to reclaim space
      - name: Prune Docker
        run: docker system prune --all --volumes --force

      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.44.1/trivy_0.44.1_Linux-64bit.deb
          sudo dpkg -i trivy_0.44.1_Linux-64bit.deb

      # Create a .trivyignore file ignoring CVE-2023-6730
      - name: Create .trivyignore
        run: |
          echo "CVE-2023-6730" > .trivyignore
          cat .trivyignore

      - name: Docker Image Scan (CRITICAL only)
        run: |
          trivy image \
            --scanners vuln \
            --ignorefile .trivyignore \
            --severity CRITICAL \
            --exit-code 1 \
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.REPOSITORY }}:latest

  # 3.5. Docker Push
  docker-push:
    runs-on: ubuntu-latest
    needs: [build-docker]
    env:
      REGION: europe-west2
      PROJECT_ID: tiny-llm-cicd
      REPOSITORY: tiny-llm-app
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Download Model Artifact
        uses: actions/download-artifact@v4
        with:
          name: model-artifact

      - name: Extract Model
        run: |
          tar -xzf model.tar.gz -C .
          ls -l ./model

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Configure Docker for Artifact Registry
        run: |
          # Use environment variables from the previous job
          echo "Using repository: ${{ env.REPOSITORY }} in region: ${{ env.REGION }} and project: ${{ env.PROJECT_ID }}"
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      # We don't care if we re-pull or re-build
      # Minimal approach: re-build from scratch
      - name: Build Docker image (again)
        run: |
          docker build \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.REPOSITORY }}:latest \
            -f docker/Dockerfile .

      - name: Push Docker image
        run: |
          docker push \
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.REPOSITORY }}:latest

  # 4. Terraform Apply, Wait, and Destroy in one job
  ephemeral-environment:
    runs-on: ubuntu-latest
    needs: [docker-push]
    env:
      REGION: europe-west2
      PROJECT_ID: tiny-llm-cicd
      REPOSITORY: tiny-llm-app
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Terraform Init & Apply
        working-directory: ./terraform
        run: |
          terraform init -upgrade
          terraform apply -auto-approve

      - name: Ephemeral Wait
        run: sleep 250

      - name: Terraform Destroy
        working-directory: ./terraform
        run: |
          terraform destroy -auto-approve
